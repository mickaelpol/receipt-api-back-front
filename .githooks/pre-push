#!/bin/bash

# Git hook pre-push : Tests complets avant push
# BLOQUE le push si les tests échouent

set -e

echo "🚀 Pre-push checks..."
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

FAILED=0

# Récupérer la branche cible
while read local_ref local_sha remote_ref remote_sha
do
    BRANCH=$(echo $remote_ref | sed 's|refs/heads/||')
    echo -e "${BLUE}📌 Push vers la branche: $BRANCH${NC}"
    echo ""
done

# ==== 1. PHPCS - Linting PHP (OBLIGATOIRE) ====
echo "🔍 Running PHPCS..."
if [ -f "phpcs.xml" ] && [ -f "backend/vendor/bin/phpcs" ]; then
    # Vérifier si Docker est disponible
    if command -v docker &> /dev/null && docker compose -f infra/docker-compose.yml -p receipt ps app | grep -q "Up" 2>/dev/null; then
        echo "  → Utilisation de PHPCS via Docker (standard PSR12)..."

        # Exclure le dossier tests avec --ignore
        PHPCS_OUTPUT=$(docker compose -f infra/docker-compose.yml -p receipt exec -T app sh -c "php -d memory_limit=512M /var/www/html/vendor/bin/phpcs --standard=PSR12 --ignore=*/tests/* /var/www/html/*.php" 2>&1 || true)

        # Afficher l'output
        echo "$PHPCS_OUTPUT" | grep -v "^$" || true

        # Ne bloquer que sur les ERRORS, pas sur les WARNINGS
        if echo "$PHPCS_OUTPUT" | grep -qE "FOUND [1-9][0-9]* ERROR"; then
            echo -e "${RED}❌ PHPCS a détecté des ERRORS${NC}"
            echo "Run: make format"
            FAILED=1
        elif echo "$PHPCS_OUTPUT" | grep -qE "FOUND.*WARNING"; then
            echo -e "${YELLOW}⚠️  PHPCS warnings détectés (non bloquant)${NC}"
        fi
        echo -e "${GREEN}✅ PHPCS passed${NC}"
    else
        echo -e "${YELLOW}⚠️  Docker non disponible, PHPCS sauté${NC}"
        echo "💡 Démarrez Docker: make up"
    fi
else
    echo -e "${YELLOW}⚠️  PHPCS not configured (skipping)${NC}"
fi
echo ""

# ==== 2. PHP Syntax Check (OBLIGATOIRE) ====
echo "🔍 Checking PHP syntax..."
# Exclure vendor/ et tests/
PHP_FILES=$(find backend -name "*.php" -not -path "*/vendor/*" -not -path "*/tests/*")
PHP_ERRORS=0

for file in $PHP_FILES; do
    if ! php -l "$file" > /dev/null 2>&1; then
        echo -e "${RED}❌ Syntax error in: $file${NC}"
        php -l "$file"
        PHP_ERRORS=$((PHP_ERRORS + 1))
    fi
done

if [ $PHP_ERRORS -eq 0 ]; then
    echo -e "${GREEN}✅ PHP syntax OK (tests exclus)${NC}"
else
    echo -e "${RED}❌ Found $PHP_ERRORS PHP syntax errors${NC}"
    FAILED=1
fi
echo ""

# ==== 3. JavaScript Lint (OBLIGATOIRE) ====
echo "🔍 Checking JavaScript..."
JS_FILES=$(find frontend/assets/js -name "*.js" 2>/dev/null || true)
JS_ERRORS=0

if [ -n "$JS_FILES" ] && command -v node &> /dev/null; then
    for file in $JS_FILES; do
        if ! node --check "$file" > /dev/null 2>&1; then
            echo -e "${RED}❌ Syntax error in: $file${NC}"
            node --check "$file"
            JS_ERRORS=$((JS_ERRORS + 1))
        fi
    done

    if [ $JS_ERRORS -eq 0 ]; then
        echo -e "${GREEN}✅ JavaScript syntax OK${NC}"
    else
        echo -e "${RED}❌ Found $JS_ERRORS JavaScript syntax errors${NC}"
        FAILED=1
    fi
else
    echo -e "${YELLOW}⚠️  Node.js not available (skipping JS checks)${NC}"
fi
echo ""

# 2. Vérifier que les dépendances sont à jour
echo "📦 Vérification des dépendances..."

# Vérifier composer.lock
if [ -f "backend/composer.json" ]; then
    if git diff --name-only HEAD~1..HEAD | grep -q "backend/composer.json"; then
        if ! git diff --name-only HEAD~1..HEAD | grep -q "backend/composer.lock"; then
            echo -e "${YELLOW}⚠️  Warning: composer.json modifié mais pas composer.lock${NC}"
            echo "Lancez: cd backend && composer update"
        fi
    fi
fi

echo -e "${GREEN}✅ Dépendances OK${NC}"
echo ""

# 3. Vérifier la configuration Docker
echo "🐳 Vérification Docker..."

if [ -f "infra/Dockerfile" ]; then
    # Vérifier que le Dockerfile est valide
    if ! grep -q "FROM php:8.1-apache" infra/Dockerfile; then
        echo -e "${RED}❌ Dockerfile invalide (FROM manquant)${NC}"
        FAILED=1
    fi
    
    # Vérifier que .htaccess est copié
    if ! grep -q "COPY .htaccess" infra/Dockerfile; then
        echo -e "${YELLOW}⚠️  Warning: .htaccess pas copié dans Dockerfile${NC}"
    fi
    
    echo -e "${GREEN}✅ Docker OK${NC}"
else
    echo -e "${YELLOW}⚠️  Dockerfile non trouvé${NC}"
fi
echo ""

# 4. Vérifier cloudbuild.yaml
echo "☁️  Vérification Cloud Build..."

if [ -f "cloudbuild.yaml" ]; then
    # Vérifier que le fichier est valide YAML
    if command -v python3 &> /dev/null; then
        python3 -c "import yaml; yaml.safe_load(open('cloudbuild.yaml'))" 2>/dev/null
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✅ cloudbuild.yaml valide${NC}"
        else
            echo -e "${RED}❌ cloudbuild.yaml invalide${NC}"
            FAILED=1
        fi
    fi
else
    echo -e "${YELLOW}⚠️  cloudbuild.yaml non trouvé${NC}"
fi
echo ""

# ==== 5. Protection branche main ====
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ]; then
    echo ""
    echo -e "${YELLOW}╔═══════════════════════════════════════════════════════╗${NC}"
    echo -e "${YELLOW}║  ⚠️  PUSHING TO MAIN BRANCH                          ║${NC}"
    echo -e "${YELLOW}║                                                       ║${NC}"
    echo -e "${YELLOW}║  Cloud Run déploiera automatiquement en production!  ║${NC}"
    echo -e "${YELLOW}║                                                       ║${NC}"
    echo -e "${YELLOW}║  Vérifiez que:                                        ║${NC}"
    echo -e "${YELLOW}║  • Tous les tests passent                             ║${NC}"
    echo -e "${YELLOW}║  • Le code fonctionne en local                        ║${NC}"
    echo -e "${YELLOW}║  • make smoke-test réussit                            ║${NC}"
    echo -e "${YELLOW}╚═══════════════════════════════════════════════════════╝${NC}"
    echo ""

    # Afficher les derniers commits
    echo "📋 Commits to be pushed:"
    git log origin/main..HEAD --oneline 2>/dev/null | head -5 || echo "  (first push to main)"
    echo ""

    read -p "Push to main and deploy to production? [y/N] " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}❌ Push cancelled by user${NC}"
        exit 1
    fi
fi

# Résultat final
if [ $FAILED -eq 1 ]; then
    echo ""
    echo -e "${RED}╔════════════════════════════════════════╗${NC}"
    echo -e "${RED}║  ❌ PRE-PUSH CHECKS FAILED            ║${NC}"
    echo -e "${RED}║  Corrigez les erreurs ci-dessus       ║${NC}"
    echo -e "${RED}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo "Pour bypasser (déconseillé): git push --no-verify"
    exit 1
fi

echo -e "${GREEN}╔════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║  ✅ ALL PRE-PUSH CHECKS PASSED        ║${NC}"
echo -e "${GREEN}║  🚀 Push autorisé                     ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
echo ""

exit 0

