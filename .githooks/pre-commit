#!/bin/bash

# Git hook pre-commit : Vérifications avant commit
# Bloque le commit si les tests échouent

set -e

echo "🔍 Pre-commit checks..."
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

FAILED=0

# 1. Vérifier les fichiers PHP modifiés
echo "📝 Vérification PHP..."
PHP_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' || true)

if [ -n "$PHP_FILES" ]; then
    echo "Fichiers PHP modifiés:"
    echo "$PHP_FILES" | sed 's/^/  - /'
    
    # Vérifier la syntaxe PHP
    for file in $PHP_FILES; do
        php -l "$file" > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo -e "${RED}❌ Erreur de syntaxe PHP dans: $file${NC}"
            FAILED=1
        fi
    done
    
    # PHPCS (si configuré)
    if [ -f "phpcs.xml" ] && [ -f "backend/vendor/bin/phpcs" ]; then
        echo "  → Linting PHP avec PHPCS..."
        for file in $PHP_FILES; do
            if [[ $file == backend/* ]]; then
                ./backend/vendor/bin/phpcs --standard=phpcs.xml "$file" 2>&1 | grep -v "^$" || true
                if [ ${PIPESTATUS[0]} -ne 0 ]; then
                    echo -e "${RED}❌ PHPCS échoué pour: $file${NC}"
                    FAILED=1
                fi
            fi
        done
    fi
    
    echo -e "${GREEN}✅ PHP OK${NC}"
else
    echo "  Aucun fichier PHP modifié"
fi
echo ""

# 2. Vérifier les fichiers JavaScript modifiés
echo "📝 Vérification JavaScript..."
JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.js$' || true)

if [ -n "$JS_FILES" ]; then
    echo "Fichiers JS modifiés:"
    echo "$JS_FILES" | sed 's/^/  - /'
    
    # Vérifier la syntaxe JavaScript basique
    for file in $JS_FILES; do
        # Vérifier qu'il n'y a pas de console.log (optionnel)
        if grep -n "console\.log" "$file" > /dev/null 2>&1; then
            echo -e "${YELLOW}⚠️  Warning: console.log trouvé dans $file${NC}"
            grep -n "console\.log" "$file" | head -3
        fi
        
        # Vérifier la syntaxe avec Node (si disponible)
        if command -v node &> /dev/null; then
            node --check "$file" > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo -e "${RED}❌ Erreur de syntaxe JavaScript dans: $file${NC}"
                FAILED=1
            fi
        fi
    done
    
    echo -e "${GREEN}✅ JavaScript OK${NC}"
else
    echo "  Aucun fichier JavaScript modifié"
fi
echo ""

# 3. Vérifier qu'aucun secret n'est commité
echo "🔐 Vérification des secrets..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Vérifier les fichiers de clés
if echo "$STAGED_FILES" | grep -q "backend/keys/.*\.json"; then
    echo -e "${RED}❌ ERREUR: Tentative de commit d'un fichier de clés !${NC}"
    echo "Fichiers bloqués:"
    echo "$STAGED_FILES" | grep "backend/keys/" | sed 's/^/  - /'
    FAILED=1
fi

# Vérifier les patterns de secrets
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # Vérifier les clés API
        if grep -E "(sk-[a-zA-Z0-9]{32,}|AIza[a-zA-Z0-9_-]{35})" "$file" > /dev/null 2>&1; then
            echo -e "${RED}❌ ERREUR: Clé API détectée dans $file${NC}"
            FAILED=1
        fi
        
        # Vérifier les mots de passe en clair (hors exemples)
        if [[ $file != *.example* ]] && [[ $file != *README* ]]; then
            if grep -iE "password.*=.*['\"][^'\"]{8,}['\"]" "$file" > /dev/null 2>&1; then
                echo -e "${YELLOW}⚠️  Warning: Mot de passe potentiel dans $file${NC}"
            fi
        fi
    fi
done

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}✅ Aucun secret détecté${NC}"
fi
echo ""

# 4. Vérifier la structure des fichiers
echo "📁 Vérification de la structure..."

# Vérifier qu'il n'y a pas de .env commité
if echo "$STAGED_FILES" | grep -E "^\.env$|^infra/\.env$" > /dev/null 2>&1; then
    echo -e "${RED}❌ ERREUR: Tentative de commit d'un fichier .env !${NC}"
    echo "Utilisez .env.example à la place"
    FAILED=1
fi

# Vérifier la taille des fichiers
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo 0)
        # Bloquer les fichiers > 1MB (sauf images)
        if [ $size -gt 1048576 ] && [[ $file != *.png ]] && [[ $file != *.jpg ]] && [[ $file != *.jpeg ]]; then
            echo -e "${RED}❌ ERREUR: Fichier trop volumineux: $file ($(($size / 1024))KB)${NC}"
            FAILED=1
        fi
    fi
done

echo -e "${GREEN}✅ Structure OK${NC}"
echo ""

# Résultat final
if [ $FAILED -eq 1 ]; then
    echo ""
    echo -e "${RED}╔════════════════════════════════════════╗${NC}"
    echo -e "${RED}║  ❌ PRE-COMMIT CHECKS FAILED          ║${NC}"
    echo -e "${RED}║  Corrigez les erreurs ci-dessus       ║${NC}"
    echo -e "${RED}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo "Pour bypasser (déconseillé): git commit --no-verify"
    exit 1
fi

echo -e "${GREEN}╔════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║  ✅ ALL PRE-COMMIT CHECKS PASSED      ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
echo ""

exit 0

