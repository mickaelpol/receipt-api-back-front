name: Quality Checks

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, curl, zip
          tools: composer

      - name: Install PHP dependencies
        run: |
          cd backend
          composer install --no-dev --optimize-autoloader --no-interaction

      - name: Lint JavaScript
        run: |
          if [ -f ".eslintrc.js" ]; then
            npx eslint frontend/assets/js/app.js --config .eslintrc.js
          else
            echo "No ESLint config found, skipping JS lint"
          fi

      - name: Lint PHP
        run: |
          cd backend
          ./vendor/bin/phpcs --standard=../phpcs.xml .

      - name: Check file structure
        run: |
          echo "üîç Checking file structure..."
          
          # V√©rifier que frontend/ ne contient que de l'UI
          if find frontend/ -name "*.php" | grep -q .; then
            echo "‚ùå ERROR: frontend/ contains PHP files"
            exit 1
          fi
          
          # V√©rifier que backend/ ne contient que de l'API
          if find backend/ -name "*.html" | grep -q .; then
            echo "‚ùå ERROR: backend/ contains HTML files"
            exit 1
          fi
          
          # V√©rifier qu'aucun secret n'est commit√©
          if find . -name "*.json" -path "*/keys/*" | grep -q .; then
            echo "‚ùå ERROR: Secret files found in keys/"
            exit 1
          fi
          
          if grep -r "sk-" . --include="*.php" --include="*.js" --include="*.json" | grep -v "example\|test\|dummy" | grep -q .; then
            echo "‚ùå ERROR: Potential secret keys found in code"
            exit 1
          fi
          
          # V√©rifier qu'il n'y a qu'un seul .htaccess (√† la racine)
          htaccess_count=$(find . -name ".htaccess" | wc -l)
          if [ "$htaccess_count" -ne 1 ]; then
            echo "‚ùå ERROR: Found $htaccess_count .htaccess files, expected exactly 1 at root"
            find . -name ".htaccess" -exec echo "  Found: {}" \;
            exit 1
          fi
          
          # V√©rifier que config.local.example n'existe plus (d√©plac√© vers infra/.env.example)
          if [ -f "config.local.example" ]; then
            echo "‚ùå ERROR: config.local.example found, should be infra/.env.example"
            exit 1
          fi
          
          # V√©rifier que infra/.env.example existe et contient les variables requises
          if [ ! -f "infra/.env.example" ]; then
            echo "‚ùå ERROR: infra/.env.example missing"
            exit 1
          fi
          
          required_vars=("GCP_PROJECT_ID" "GOOGLE_OAUTH_CLIENT_ID" "SPREADSHEET_ID" "ALLOWED_EMAILS" "GCP_PROCESSOR_ID")
          for var in "${required_vars[@]}"; do
            if ! grep -q "^${var}=" infra/.env.example; then
              echo "‚ùå ERROR: Required variable $var missing in infra/.env.example"
              exit 1
            fi
          done
          
          # V√©rifier le format WHO_COLUMNS dans .env.example
          if grep -q "WHO_COLUMNS=" infra/.env.example; then
            who_columns_line=$(grep "WHO_COLUMNS=" infra/.env.example | head -1)
            if [[ ! "$who_columns_line" =~ WHO_COLUMNS=\{[^}]+\} ]]; then
              echo "‚ùå ERROR: WHO_COLUMNS format invalid in infra/.env.example"
              echo "Expected: WHO_COLUMNS={\"Name\":[\"A\",\"B\",\"C\"]}"
              echo "Found: $who_columns_line"
              exit 1
            fi
          fi
          
          echo "‚úÖ File structure validation passed"

      - name: Check README
        run: |
          if [ ! -f "README.md" ]; then
            echo "‚ùå ERROR: README.md missing"
            exit 1
          fi
          
          # V√©rifier que le README contient les sections importantes
          if ! grep -q "Architecture" README.md; then
            echo "‚ùå ERROR: README.md missing Architecture section"
            exit 1
          fi
          
          if ! grep -q "D√©veloppement Local" README.md; then
            echo "‚ùå ERROR: README.md missing D√©veloppement Local section"
            exit 1
          fi
          
          echo "‚úÖ README validation passed"

      - name: Validation du cache-busting
        run: |
          echo "üîç Validation du syst√®me de cache-busting..."
          
          # V√©rifier que le script existe
          if [ ! -f "scripts/cache-bust-safe.sh" ]; then
            echo "‚ùå ERROR: scripts/cache-bust-safe.sh missing"
            exit 1
          fi
          
          # V√©rifier que le script est ex√©cutable
          if [ ! -x "scripts/cache-bust-safe.sh" ]; then
            echo "‚ùå ERROR: scripts/cache-bust-safe.sh not executable"
            exit 1
          fi
          
          # V√©rifier que index.html contient des r√©f√©rences versionn√©es
          if ! grep -q "app\.css\?v=" frontend/index.html; then
            echo "‚ùå ERROR: frontend/index.html missing versioned CSS reference"
            exit 1
          fi
          
          if ! grep -q "app\.js\?v=" frontend/index.html; then
            echo "‚ùå ERROR: frontend/index.html missing versioned JS reference"
            exit 1
          fi
          
          echo "‚úÖ Cache-busting validation passed"

      - name: Summary
        run: |
          echo "‚úÖ All quality checks passed!"
          echo "üìä Summary:"
          echo "  - JavaScript linting: ‚úÖ"
          echo "  - PHP linting: ‚úÖ"
          echo "  - Cache-busting validation: ‚úÖ"
          echo "  - File structure: ‚úÖ"
          echo "  - Security check: ‚úÖ"
          echo "  - Documentation: ‚úÖ"
