#!/bin/bash

# Script pour tester le build Docker localement
set -e

echo "üê≥ Test du build Docker local..."
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables
IMAGE_NAME="receipt-parser-test"
PROJECT_ROOT="$(cd "$(dirname "$0")/.." && pwd)"

echo "üìÅ R√©pertoire du projet : $PROJECT_ROOT"
echo ""

# √âtape 1 : Nettoyer les images pr√©c√©dentes
echo "üßπ Nettoyage des anciennes images..."
docker rmi $IMAGE_NAME 2>/dev/null || true
echo ""

# √âtape 2 : Build de l'image
echo "üî® Build de l'image Docker..."
cd "$PROJECT_ROOT"

if docker build -t $IMAGE_NAME -f infra/Dockerfile .; then
    echo -e "${GREEN}‚úÖ Build r√©ussi !${NC}"
else
    echo -e "${RED}‚ùå Build √©chou√© !${NC}"
    exit 1
fi
echo ""

# √âtape 3 : V√©rifier le contenu de l'image
echo "üîç V√©rification du contenu de l'image..."
echo ""

echo "Fichiers dans /var/www/html :"
docker run --rm $IMAGE_NAME ls -la /var/www/html/
echo ""

echo "V√©rification de .htaccess :"
if docker run --rm $IMAGE_NAME test -f /var/www/html/.htaccess; then
    echo -e "${GREEN}‚úÖ .htaccess pr√©sent${NC}"
    docker run --rm $IMAGE_NAME head -5 /var/www/html/.htaccess
else
    echo -e "${RED}‚ùå .htaccess manquant !${NC}"
fi
echo ""

echo "V√©rification de index.php :"
if docker run --rm $IMAGE_NAME test -f /var/www/html/index.php; then
    echo -e "${GREEN}‚úÖ index.php pr√©sent${NC}"
else
    echo -e "${RED}‚ùå index.php manquant !${NC}"
fi
echo ""

echo "V√©rification du frontend :"
if docker run --rm $IMAGE_NAME test -d /var/www/html/frontend; then
    echo -e "${GREEN}‚úÖ frontend/ pr√©sent${NC}"
    docker run --rm $IMAGE_NAME ls /var/www/html/frontend/
else
    echo -e "${RED}‚ùå frontend/ manquant !${NC}"
fi
echo ""

echo "V√©rification de vendor/ (composer) :"
if docker run --rm $IMAGE_NAME test -d /var/www/html/vendor; then
    echo -e "${GREEN}‚úÖ vendor/ install√©${NC}"
    docker run --rm $IMAGE_NAME ls /var/www/html/vendor/ | head -10
else
    echo -e "${RED}‚ùå vendor/ manquant !${NC}"
fi
echo ""

# √âtape 4 : Test de la configuration Apache
echo "üîß Test de la configuration Apache..."
if docker run --rm $IMAGE_NAME apache2ctl configtest 2>&1 | grep -i "syntax ok"; then
    echo -e "${GREEN}‚úÖ Configuration Apache OK${NC}"
else
    echo -e "${RED}‚ùå Erreur de configuration Apache${NC}"
    docker run --rm $IMAGE_NAME apache2ctl configtest
fi
echo ""

# √âtape 5 : Lancer le conteneur en mode test
echo "üöÄ Lancement du conteneur en mode test..."
echo ""

# Arr√™ter le conteneur s'il existe d√©j√†
docker rm -f $IMAGE_NAME 2>/dev/null || true

# Lancer le conteneur
docker run -d \
    --name $IMAGE_NAME \
    -p 8080:8080 \
    -e PORT=8080 \
    -e APP_ENV=local \
    -e DEBUG=1 \
    $IMAGE_NAME

echo "‚è≥ Attente du d√©marrage du conteneur (10s)..."
sleep 10

# V√©rifier les logs
echo ""
echo "üìã Logs du conteneur :"
echo "----------------------------------------"
docker logs $IMAGE_NAME
echo "----------------------------------------"
echo ""

# √âtape 6 : Tests des endpoints
echo "üß™ Tests des endpoints..."
echo ""

test_endpoint() {
    local url=$1
    local description=$2
    
    echo -n "  Testing $description... "
    
    status_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 "$url" 2>/dev/null || echo "000")
    
    if [ "$status_code" = "200" ]; then
        echo -e "${GREEN}‚úÖ $status_code${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $status_code${NC}"
        return 1
    fi
}

PASSED=0
FAILED=0

if test_endpoint "http://localhost:8080/" "Home page (/)"; then
    ((PASSED++))
else
    ((FAILED++))
fi

if test_endpoint "http://localhost:8080/api/config" "Config endpoint (/api/config)"; then
    ((PASSED++))
else
    ((FAILED++))
fi

if test_endpoint "http://localhost:8080/health" "Health endpoint (/health)"; then
    ((PASSED++))
else
    ((FAILED++))
fi

if test_endpoint "http://localhost:8080/ready" "Ready endpoint (/ready)"; then
    ((PASSED++))
else
    ((FAILED++))
fi

echo ""
echo "üìä R√©sultat: $PASSED/4 tests r√©ussis"
echo ""

# √âtape 7 : Afficher les URLs pour tests manuels
echo "üåê URLs pour tests manuels :"
echo "  - Home:   http://localhost:8080/"
echo "  - Config: http://localhost:8080/api/config"
echo "  - Health: http://localhost:8080/health"
echo "  - Ready:  http://localhost:8080/ready"
echo ""

# √âtape 8 : Instructions de nettoyage
echo "üßπ Pour arr√™ter et nettoyer :"
echo "  docker rm -f $IMAGE_NAME"
echo "  docker rmi $IMAGE_NAME"
echo ""

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Tous les tests sont pass√©s ! L'image est pr√™te pour le d√©ploiement.${NC}"
    echo ""
    echo "Pour garder le conteneur en cours d'ex√©cution et tester manuellement :"
    echo "  - Visitez http://localhost:8080 dans votre navigateur"
    echo "  - Arr√™tez le conteneur avec : docker rm -f $IMAGE_NAME"
    exit 0
else
    echo -e "${RED}‚ùå $FAILED test(s) √©chou√©(s). V√©rifiez les logs ci-dessus.${NC}"
    echo ""
    echo "Pour d√©boguer :"
    echo "  - Voir les logs : docker logs $IMAGE_NAME"
    echo "  - Entrer dans le conteneur : docker exec -it $IMAGE_NAME bash"
    echo "  - Arr√™ter le conteneur : docker rm -f $IMAGE_NAME"
    exit 1
fi

