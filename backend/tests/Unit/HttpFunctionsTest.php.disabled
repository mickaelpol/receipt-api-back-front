<?php

declare(strict_types=1);

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

/**
 * Tests for HTTP-related functions
 */
class HttpFunctionsTest extends TestCase
{
    /**
     * Test http_json with mock server (using httpbin.org for testing)
     */
    public function testHttpJsonGet(): void
    {
        $this->markTestSkipped('External HTTP calls can be slow or fail - skip in regular test suite');

        // Use a reliable test endpoint
        $url = 'https://httpbin.org/get';
        $result = http_json('GET', $url, ['User-Agent' => 'PHPUnit-Test']);

        $this->assertEquals(200, $result['status']);
        $this->assertIsArray($result['json']);
        $this->assertArrayHasKey('headers', $result['json']);
    }

    /**
     * Test http_json with POST
     */
    public function testHttpJsonPost(): void
    {
        $this->markTestSkipped('External HTTP calls can be slow or fail - skip in regular test suite');

        $url = 'https://httpbin.org/post';
        $payload = ['test' => 'data', 'value' => 123];
        $result = http_json('POST', $url, ['Content-Type' => 'application/json'], $payload);

        $this->assertEquals(200, $result['status']);
        $this->assertIsArray($result['json']);
        $this->assertArrayHasKey('json', $result['json']);
        $this->assertEquals('data', $result['json']['json']['test']);
    }

    /**
     * Test http_json with invalid URL
     */
    public function testHttpJsonInvalidUrl(): void
    {
        $this->markTestSkipped('DNS lookup for invalid domain can timeout - skip in regular test suite');

        $result = http_json('GET', 'http://this-domain-does-not-exist-12345678.com');

        $this->assertEquals(0, $result['status']);
        $this->assertNull($result['json']);
        $this->assertArrayHasKey('error', $result);
        $this->assertNotEmpty($result['error']);
    }

    /**
     * Test http_json with 404 response
     */
    public function testHttpJson404(): void
    {
        $this->markTestSkipped('External HTTP calls can be slow or fail - skip in regular test suite');

        $url = 'https://httpbin.org/status/404';
        $result = http_json('GET', $url);

        $this->assertEquals(404, $result['status']);
    }

    /**
     * Test http_json with custom headers
     */
    public function testHttpJsonCustomHeaders(): void
    {
        $this->markTestSkipped('External HTTP calls can be slow or fail - skip in regular test suite');

        $url = 'https://httpbin.org/headers';
        $result = http_json('GET', $url, [
            'X-Custom-Header' => 'test-value',
            'Accept' => 'application/json'
        ]);

        $this->assertEquals(200, $result['status']);
        $this->assertIsArray($result['json']);
        $this->assertArrayHasKey('headers', $result['json']);
        $this->assertEquals('test-value', $result['json']['headers']['X-Custom-Header']);
    }

    /**
     * Test http_json timeout (commented out as it takes time)
     */
    public function testHttpJsonTimeout(): void
    {
        // Use httpbin.org delay endpoint (delays for 5 seconds, but curl timeout is 90s)
        // This test verifies that very slow endpoints eventually timeout
        $this->markTestSkipped('Timeout test takes too long to run in regular test suite');

        // $url = 'https://httpbin.org/delay/100'; // 100 second delay, but curl timeout is 90s
        // $result = http_json('GET', $url);
        // $this->assertEquals(0, $result['status']);
    }

    /**
     * Test http_get_json_google with invalid response
     */
    public function testHttpGetJsonGoogleInvalidResponse(): void
    {
        $this->markTestSkipped('External HTTP calls can be slow or fail - skip in regular test suite');

        $this->expectException(\RuntimeException::class);
        $this->expectExceptionMessage('HTTP');

        // Use an endpoint that returns non-JSON
        http_get_json_google('https://httpbin.org/status/500', 'fake-token');
    }

    /**
     * Test http_get_json_google with valid JSON response
     */
    public function testHttpGetJsonGoogleValidResponse(): void
    {
        $this->markTestSkipped('External HTTP calls can be slow or fail - skip in regular test suite');

        // Use httpbin.org which returns valid JSON
        $url = 'https://httpbin.org/get';
        $result = http_get_json_google($url, 'test-bearer-token');

        $this->assertIsArray($result);
        $this->assertArrayHasKey('headers', $result);
        $this->assertEquals('Bearer test-bearer-token', $result['headers']['Authorization']);
    }

    /**
     * Test sendJsonResponse output (cannot test exit, but can test output)
     */
    public function testSendJsonResponseOutput(): void
    {
        // We can't actually test sendJsonResponse because it calls exit()
        // But we can verify the logic by checking what would be output

        $data = ['ok' => true, 'message' => 'Success', 'value' => 42];
        $expectedJson = json_encode($data, JSON_UNESCAPED_UNICODE | JSON_PRESERVE_ZERO_FRACTION);

        // Mock the response
        ob_start();
        try {
            sendJsonResponse($data, 201);
        } catch (\Throwable $e) {
            // exit() will throw in some test environments
        }
        $output = ob_get_clean();

        if ($output !== false && $output !== '') {
            $this->assertJson($output);
            $decoded = json_decode($output, true);
            $this->assertEquals(true, $decoded['ok']);
            $this->assertEquals('Success', $decoded['message']);
            $this->assertEquals(42, $decoded['value']);
        } else {
            // If exit() prevented output capture, just verify the function exists
            $this->assertTrue(function_exists('sendJsonResponse'));
        }
    }

    /**
     * Test sendErrorResponse output
     */
    public function testSendErrorResponseOutput(): void
    {
        ob_start();
        try {
            sendErrorResponse('Test error message', 400);
        } catch (\Throwable $e) {
            // exit() will throw in some test environments
        }
        $output = ob_get_clean();

        if ($output !== false && $output !== '') {
            $this->assertJson($output);
            $decoded = json_decode($output, true);
            $this->assertFalse($decoded['ok']);
            $this->assertEquals('Test error message', $decoded['error']);
        } else {
            $this->assertTrue(function_exists('sendErrorResponse'));
        }
    }
}
