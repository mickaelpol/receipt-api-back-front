# Cloud Build Pipeline for Scan2Sheet - Receipt API
# This pipeline builds, tests, and deploys the application to Cloud Run
# 
# Triggers:
# - staging: deploys to staging environment
# - main: deploys to production after manual approval
#
# Substitutions:
# - $_ENV: environment (staging|prod)
# - $PROJECT_ID: GCP project ID (264113083582)
# - $REGION: deployment region (europe-west9)
# - $SERVICE_NAME: Cloud Run service name (receipt-parser)

steps:
  # Step 1: Pre-build quality gates (lint/tests)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'pre-build-checks'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔍 Running pre-build quality checks..."
        
        # Check if required files exist
        if [ ! -f "Dockerfile" ]; then
          echo "❌ Dockerfile not found"
          exit 1
        fi
        
        if [ ! -f "backend/composer.json" ]; then
          echo "❌ composer.json not found"
          exit 1
        fi
        
        # Basic syntax checks
        echo "✅ File structure validation passed"
        echo "✅ Pre-build checks completed successfully"

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:$SHORT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:latest'
      - '-f'
      - 'Dockerfile'
      - '.'
    timeout: '600s'  # 10 minutes timeout

  # Step 3: Push to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:$SHORT_SHA'
    timeout: '300s'  # 5 minutes timeout

  # Step 4: Deploy to Cloud Run (staging or prod)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-cloud-run'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:$SHORT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--min-instances'
      - '1'
      - '--max-instances'
      - '10'
      - '--concurrency'
      - '1'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--port'
      - '8080'
      - '--service-account'
      - 'docai-sa@scan-document-ai.iam.gserviceaccount.com'
      - '--set-env-vars'
      - 'ENV=${_ENV},GCP_PROJECT_ID=264113083582,DEBUG=false,GOOGLE_APPLICATION_CREDENTIALS=/tmp/credentials.json,GOOGLE_OAUTH_CLIENT_ID=${_GOOGLE_OAUTH_CLIENT_ID},SPREADSHEET_ID=${_SPREADSHEET_ID},DEFAULT_SHEET=${_DEFAULT_SHEET},ALLOWED_EMAILS=${_ALLOWED_EMAILS},GCP_LOCATION=${_GCP_LOCATION},ALLOWED_ORIGINS=${_ALLOWED_ORIGINS},WHO_COLUMNS=${_WHO_COLUMNS},MAX_BATCH_UPLOADS=${_MAX_BATCH_UPLOADS}'
      - '--revision-suffix'
      - '${SHORT_SHA}'
    timeout: '600s'  # 10 minutes timeout

  # Step 5: Smoke tests (only for staging, prod after approval)
  - name: 'gcr.io/cloud-builders/curl'
    id: 'smoke-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🧪 Running smoke tests..."
        
        # Get the service URL
        SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format='value(status.url)')
        echo "Service URL: $$SERVICE_URL"
        
        # Test endpoints with retries
        test_endpoint() {
          local url=$$1
          local expected_status=$$2
          local description=$$3
          
          echo "Testing $$description: $$url"
          
          for i in {1..3}; do
            status_code=$$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$$url")
            if [ "$$status_code" = "$$expected_status" ]; then
              echo "✅ $$description: $$status_code"
              return 0
            fi
            echo "⏳ Attempt $$i failed ($$status_code), retrying in 5s..."
            sleep 5
          done
          
          echo "❌ $$description failed after 3 attempts ($$status_code)"
          return 1
        }
        
        # Run smoke tests
        test_endpoint "$$SERVICE_URL/" "200" "Home page"
        test_endpoint "$$SERVICE_URL/api/config" "200" "Config endpoint"
        test_endpoint "$$SERVICE_URL/api/ready" "200" "Ready endpoint"
        
        echo "✅ All smoke tests passed!"
    waitFor: ['deploy-cloud-run']
    timeout: '300s'  # 5 minutes timeout

  # Step 6: Send success notification
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'notify-success'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "📧 Sending deployment success notification..."
        
        SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format='value(status.url)')
        
        # Create email body
        cat > /workspace/email_body.txt << EOF
        🎉 Scan2Sheet Deployment Successful
        
        Environment: ${_ENV}
        Commit: $COMMIT_SHA
        Image: ${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:$SHORT_SHA
        Service URL: $$SERVICE_URL
        
        Build Log: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID
        
        Next Steps:
        - Verify application functionality
        - Monitor logs for any issues
        EOF
        
        echo "✅ Notification prepared"
    waitFor: ['smoke-tests']

# Manual approval for production deployments
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Substitutions for different environments
substitutions:
  _ENV: 'staging'
  _REGION: 'europe-west9'
  _SERVICE_NAME: 'receipt-parser'
  _GOOGLE_OAUTH_CLIENT_ID: 'YOUR_GOOGLE_OAUTH_CLIENT_ID'
  _SPREADSHEET_ID: 'YOUR_GOOGLE_SHEET_ID'
  _DEFAULT_SHEET: 'Sheet1'
  _ALLOWED_EMAILS: 'your-email@gmail.com'
  _GCP_LOCATION: 'eu'
  _ALLOWED_ORIGINS: 'https://receipt-parser-HASH.a.run.app'
  _WHO_COLUMNS: '{"Qui":["Mickael","Marie","Autre"]}'
  _MAX_BATCH_UPLOADS: '10'

# Timeout for entire build
timeout: '1200s'  # 20 minutes total timeout
