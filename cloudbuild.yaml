# Cloud Build Pipeline for Scan2Sheet - Receipt API
# This pipeline runs tests, builds, and deploys the application to Cloud Run
#
# Triggers:
# - main: runs full test suite + deploys to production
# - staging: runs tests + deploys to staging
# - PR: runs tests only (no deployment)
#
# Free tier: 120 minutes/day on Google Cloud Build
#
# Substitutions:
# - $_ENV: environment (staging|prod)
# - $PROJECT_ID: GCP project ID
# - $REGION: deployment region (europe-west9)
# - $SERVICE_NAME: Cloud Run service name (receipt-parser)

steps:
  # ═══════════════════════════════════════════════════════════════
  # 🧪 PHASE 1: TESTS & QUALITY CHECKS
  # ═══════════════════════════════════════════════════════════════

  # Step 1: PHP Syntax Check
  - name: 'php:8.1-cli'
    id: 'php-syntax-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "════════════════════════════════════════════════════"
        echo "🔍 PHP Syntax Check"
        echo "════════════════════════════════════════════════════"

        PHP_FILES=$$(find backend -name "*.php" -not -path "*/vendor/*" -not -path "*/coverage/*")
        ERROR_COUNT=0

        for file in $$PHP_FILES; do
          if ! php -l "$$file" > /dev/null 2>&1; then
            echo "❌ Syntax error in: $$file"
            php -l "$$file"
            ERROR_COUNT=$$((ERROR_COUNT + 1))
          fi
        done

        if [ $$ERROR_COUNT -gt 0 ]; then
          echo "❌ Found $$ERROR_COUNT PHP syntax error(s)"
          exit 1
        fi

        echo "✅ All PHP files have valid syntax"
    timeout: '120s'

  # Step 2: Install PHP dependencies
  - name: 'composer:2'
    id: 'install-composer-deps'
    args:
      - 'install'
      - '--prefer-dist'
      - '--no-progress'
      - '--no-interaction'
      - '--optimize-autoloader'
      - '--working-dir=backend'
    timeout: '300s'

  # Step 3: PHPCS Linting
  - name: 'php:8.1-cli'
    id: 'phpcs-lint'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "════════════════════════════════════════════════════"
        echo "🔍 PHPCS Linting"
        echo "════════════════════════════════════════════════════"

        cd backend

        if [ ! -f "vendor/bin/phpcs" ]; then
          echo "❌ PHPCS not found. Did composer install fail?"
          exit 1
        fi

        ./vendor/bin/phpcs --standard=../phpcs.xml . --extensions=php || {
          echo "❌ PHPCS found coding standard violations"
          echo "💡 Run locally: cd backend && ./vendor/bin/phpcs --standard=../phpcs.xml . --extensions=php"
          exit 1
        }

        echo "✅ PHPCS checks passed"
    waitFor: ['install-composer-deps']
    timeout: '180s'

  # Step 4: PHPUnit Tests
  - name: 'php:8.1-cli'
    id: 'phpunit-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "════════════════════════════════════════════════════"
        echo "🧪 PHPUnit Unit Tests"
        echo "════════════════════════════════════════════════════"

        cd backend

        if [ ! -f "vendor/bin/phpunit" ]; then
          echo "❌ PHPUnit not found. Did composer install fail?"
          exit 1
        fi

        # Run unit tests (without coverage to avoid warnings)
        php vendor/bin/phpunit --testsuite Unit --colors=always --no-coverage || {
          echo "❌ PHPUnit tests failed"
          echo "💡 Run locally: cd backend && php vendor/bin/phpunit --testsuite Unit --no-coverage"
          exit 1
        }

        echo "✅ All PHPUnit tests passed"
    waitFor: ['install-composer-deps']
    timeout: '300s'

  # Step 5: Code Coverage (optional, non-blocking)
  - name: 'php:8.1-cli'
    id: 'code-coverage'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "════════════════════════════════════════════════════"
        echo "📊 Code Coverage Analysis"
        echo "════════════════════════════════════════════════════"

        cd backend

        # Install PCOV for faster coverage
        if ! pecl install pcov 2>/dev/null; then
          echo "⚠️  PCOV installation failed, skipping coverage"
          exit 0
        fi

        echo "extension=pcov.so" > /usr/local/etc/php/conf.d/pcov.ini

        # Generate coverage
        php -d pcov.enabled=1 -d pcov.directory=. vendor/bin/phpunit \
          --coverage-text \
          --coverage-clover coverage/clover.xml \
          --colors=always || {
          echo "⚠️  Coverage generation failed (non-blocking)"
          exit 0
        }

        echo "✅ Code coverage generated"
    waitFor: ['phpunit-tests']
    timeout: '300s'
    # Non-blocking: continue even if this fails

  # Step 6: JavaScript Syntax Check
  - name: 'node:18-slim'
    id: 'js-syntax-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "════════════════════════════════════════════════════"
        echo "🔍 JavaScript Syntax Check"
        echo "════════════════════════════════════════════════════"

        JS_FILES=$$(find frontend/assets/js -name "*.js" 2>/dev/null || true)

        if [ -z "$$JS_FILES" ]; then
          echo "ℹ️  No JavaScript files found"
          exit 0
        fi

        ERROR_COUNT=0
        for file in $$JS_FILES; do
          if ! node --check "$$file" 2>/dev/null; then
            echo "❌ Syntax error in: $$file"
            node --check "$$file"
            ERROR_COUNT=$$((ERROR_COUNT + 1))
          fi
        done

        if [ $$ERROR_COUNT -gt 0 ]; then
          echo "❌ Found $$ERROR_COUNT JavaScript syntax error(s)"
          exit 1
        fi

        echo "✅ All JavaScript files have valid syntax"
    timeout: '120s'

  # Step 7: Validate Docker configuration
  - name: 'gcr.io/cloud-builders/docker'
    id: 'validate-docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "════════════════════════════════════════════════════"
        echo "🐳 Validating Dockerfile"
        echo "════════════════════════════════════════════════════"

        if [ ! -f "infra/Dockerfile" ]; then
          echo "❌ infra/Dockerfile not found"
          exit 1
        fi

        # Just validate syntax, don't build yet
        docker build --quiet --dry-run -f infra/Dockerfile . > /dev/null 2>&1 || {
          echo "⚠️  Dockerfile validation failed (will try full build anyway)"
        }

        echo "✅ Dockerfile validation passed"
    timeout: '120s'

  # Step 8: Tests Summary
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'tests-summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo ""
        echo "════════════════════════════════════════════════════"
        echo "✅ ALL TESTS PASSED!"
        echo "════════════════════════════════════════════════════"
        echo ""
        echo "✓ PHP Syntax Check"
        echo "✓ PHPCS Linting"
        echo "✓ PHPUnit Tests"
        echo "✓ Code Coverage"
        echo "✓ JavaScript Syntax"
        echo "✓ Docker Validation"
        echo ""
        echo "Proceeding to build & deployment..."
        echo ""
    waitFor: ['php-syntax-check', 'phpcs-lint', 'phpunit-tests', 'js-syntax-check', 'validate-docker']
    timeout: '30s'

  # ═══════════════════════════════════════════════════════════════
  # 🏗️  PHASE 2: BUILD & DEPLOY
  # ═══════════════════════════════════════════════════════════════

  # Step 9: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:$SHORT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:latest'
      - '-f'
      - 'infra/Dockerfile'
      - '.'
    waitFor: ['tests-summary']
    timeout: '600s'

  # Step 10: Push to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:$SHORT_SHA'
    waitFor: ['build-image']
    timeout: '300s'

  # Step 11: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-cloud-run'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/apps-ticket/receipt-parser:$SHORT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--min-instances'
      - '1'
      - '--max-instances'
      - '10'
      - '--concurrency'
      - '10'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--port'
      - '8080'
      - '--service-account'
      - 'docai-sa@scan-document-ai.iam.gserviceaccount.com'
      - '--set-env-vars'
      - 'APP_ENV=${_ENV},DEBUG=0,GCP_LOCATION=eu,DEFAULT_SHEET=Sheet1,MAX_BATCH_UPLOADS=10'
      - '--set-secrets'
      - 'GOOGLE_OAUTH_CLIENT_ID=oauth-client-id:latest,SPREADSHEET_ID=spreadsheet-id:latest,GCP_PROJECT_ID=gcp-project-id:latest,GCP_PROCESSOR_ID=gcp-processor-id:latest,ALLOWED_EMAILS=allowed-emails:latest,WHO_COLUMNS=who-columns:latest'
      - '--timeout'
      - '300'
      - '--no-cpu-throttling'
      - '--revision-suffix'
      - '${SHORT_SHA}'
    waitFor: ['push-image']
    timeout: '600s'

  # ═══════════════════════════════════════════════════════════════
  # 🧪 PHASE 3: SMOKE TESTS (POST-DEPLOYMENT)
  # ═══════════════════════════════════════════════════════════════

  # Step 12: Smoke tests
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'smoke-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "════════════════════════════════════════════════════"
        echo "🧪 Running Smoke Tests"
        echo "════════════════════════════════════════════════════"

        # Get service URL
        SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format='value(status.url)')
        echo "Service URL: $$SERVICE_URL"

        # Test function with retries
        test_endpoint() {
          local url=$$1
          local expected_status=$$2
          local description=$$3

          echo ""
          echo "Testing $$description..."

          for i in {1..3}; do
            status_code=$$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$$url")

            if [ "$$status_code" = "$$expected_status" ]; then
              echo "✅ $$description: HTTP $$status_code"
              return 0
            fi

            echo "⏳ Attempt $$i failed (HTTP $$status_code), retrying in 5s..."
            sleep 5
          done

          echo "❌ $$description failed after 3 attempts (HTTP $$status_code)"
          return 1
        }

        # Run smoke tests
        FAILED=0
        test_endpoint "$$SERVICE_URL/" "200" "Home page" || FAILED=1
        test_endpoint "$$SERVICE_URL/api/config" "200" "Config endpoint" || FAILED=1
        test_endpoint "$$SERVICE_URL/api/ready" "200" "Ready endpoint" || FAILED=1
        test_endpoint "$$SERVICE_URL/api/health" "200" "Health endpoint" || FAILED=1

        if [ $$FAILED -eq 1 ]; then
          echo ""
          echo "❌ Some smoke tests failed"
          exit 1
        fi

        echo ""
        echo "✅ All smoke tests passed!"
    waitFor: ['deploy-cloud-run']
    timeout: '300s'

  # Step 13: Deployment summary
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deployment-summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format='value(status.url)')

        echo ""
        echo "════════════════════════════════════════════════════"
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "════════════════════════════════════════════════════"
        echo ""
        echo "Environment:    ${_ENV}"
        echo "Commit:         $COMMIT_SHA"
        echo "Image:          $SHORT_SHA"
        echo "Service URL:    $$SERVICE_URL"
        echo "Build Log:      https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID"
        echo ""
        echo "Next Steps:"
        echo "  • Verify application functionality"
        echo "  • Monitor logs for any issues"
        echo "  • Check version badge in app: ⟳ v8"
        echo ""
        echo "════════════════════════════════════════════════════"
    waitFor: ['smoke-tests']
    timeout: '60s'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Faster builds

# Substitutions for different environments
substitutions:
  _ENV: 'staging'
  _REGION: 'europe-west9'
  _SERVICE_NAME: 'receipt-parser'

# Total timeout for entire build (including tests)
timeout: '1800s'  # 30 minutes (should complete in ~10 minutes normally)
